/**
 * üöÄ ButtonAPI - Script de Recupera√ß√£o de localStorage
 * 
 * COMO USAR:
 * 1. Inclua este script na p√°gina de destino do redirecionamento
 * 2. O script automaticamente detecta o par√¢metro ?tempData= na URL
 * 3. Recupera os dados do localStorage transferidos
 * 4. Disponibiliza os dados para uso na p√°gina
 * 
 * EXEMPLO DE USO:
 * <script src="localStorage-recovery-script.js"></script>
 * <script>
 *   // Aguardar a recupera√ß√£o dos dados
 *   window.addEventListener('buttonapi-data-ready', function(event) {
 *     console.log('Dados recuperados:', event.detail);
 *     const userData = event.detail;
 *     
 *     // Exemplo: preencher formul√°rio com dados transferidos
 *     if (userData.nome) {
 *       document.getElementById('campo-nome').value = userData.nome;
 *     }
 *     if (userData.email) {
 *       document.getElementById('campo-email').value = userData.email;
 *     }
 *   });
 * </script>
 */

(function() {
    'use strict';
    
    // Configura√ß√£o - ALTERE AQUI A URL DO SEU SERVIDOR BUTTONAPI
    const BUTTONAPI_SERVER = 'http://localhost:5000'; // Mude para sua URL de produ√ß√£o
    
    console.log('üîÑ ButtonAPI Recovery Script carregado');
    
    // Fun√ß√£o para extrair par√¢metros da URL
    function getUrlParameter(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
    
    // Fun√ß√£o para fazer requisi√ß√£o √† API
    function fetchTempData(tempDataId) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', BUTTONAPI_SERVER + '/api/temp-data/' + tempDataId, true);
            
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        try {
                            const response = JSON.parse(xhr.responseText);
                            resolve(response);
                        } catch (e) {
                            reject(new Error('Erro ao processar resposta: ' + e.message));
                        }
                    } else if (xhr.status === 404) {
                        reject(new Error('Dados tempor√°rios n√£o encontrados (podem ter expirado)'));
                    } else {
                        reject(new Error('Erro na API: Status ' + xhr.status));
                    }
                }
            };
            
            xhr.onerror = function() {
                reject(new Error('Erro de rede ao acessar ButtonAPI'));
            };
            
            xhr.send();
        });
    }
    
    // Fun√ß√£o para restaurar dados no localStorage
    function restoreLocalStorage(data) {
        try {
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    localStorage.setItem(key, data[key]);
                    console.log('‚úÖ Restaurado:', key, '=', data[key]);
                }
            }
            return Object.keys(data).length;
        } catch (e) {
            console.error('‚ùå Erro ao restaurar localStorage:', e);
            return 0;
        }
    }
    
    // Fun√ß√£o para disparar evento customizado com os dados
    function dispatchDataReadyEvent(data, metadata) {
        const event = new CustomEvent('buttonapi-data-ready', {
            detail: {
                ...data,
                _metadata: {
                    sourceUrl: metadata.sourceUrl,
                    buttonId: metadata.buttonId,
                    retrievedAt: metadata.retrievedAt
                }
            }
        });
        window.dispatchEvent(event);
        console.log('üéâ Evento buttonapi-data-ready disparado com', Object.keys(data).length, 'itens');
    }
    
    // Fun√ß√£o principal para processar recupera√ß√£o
    function processDataRecovery() {
        // Verificar se h√° par√¢metro tempData na URL
        const tempDataId = getUrlParameter('tempData');
        
        if (!tempDataId) {
            console.log('‚ÑπÔ∏è Nenhum par√¢metro tempData encontrado na URL');
            return;
        }
        
        console.log('üîç ID de dados tempor√°rios encontrado:', tempDataId);
        
        // Buscar dados na API
        fetchTempData(tempDataId)
            .then(function(response) {
                console.log('üì¶ Dados recuperados da API:', response);
                
                const parsedData = response.data || {};
                const restoredCount = restoreLocalStorage(parsedData);
                
                console.log('‚úÖ Recupera√ß√£o conclu√≠da!', restoredCount, 'itens restaurados no localStorage');
                
                // Disparar evento para a p√°gina usar os dados
                dispatchDataReadyEvent(parsedData, {
                    sourceUrl: response.sourceUrl,
                    buttonId: response.buttonId,
                    retrievedAt: response.retrievedAt
                });
                
                // Limpar par√¢metro da URL (opcional)
                const url = new URL(window.location);
                url.searchParams.delete('tempData');
                window.history.replaceState({}, document.title, url.pathname + url.search);
                
            })
            .catch(function(error) {
                console.error('‚ùå Erro na recupera√ß√£o:', error.message);
                
                // Disparar evento de erro
                const errorEvent = new CustomEvent('buttonapi-data-error', {
                    detail: { error: error.message }
                });
                window.dispatchEvent(errorEvent);
            });
    }
    
    // Iniciar o processo quando o DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', processDataRecovery);
    } else {
        processDataRecovery();
    }
    
    // Disponibilizar fun√ß√£o globalmente para uso manual se necess√°rio
    window.ButtonAPIRecovery = {
        processRecovery: processDataRecovery,
        getUrlParameter: getUrlParameter
    };
    
})();