import { useEffect } from 'react';
import { useLocation } from 'wouter';
import { getAllPendingPayments, clearPendingPayment } from '@/lib/pending-payments';

/**
 * Componente que verifica pagamentos pendentes toda vez que o usu√°rio carrega qualquer p√°gina
 * Isso garante que mesmo se o usu√°rio sair da p√°gina /pagamento, ele ser√° redirecionado quando o pagamento for aprovado
 */
const PaymentChecker = () => {
  const [, setLocation] = useLocation();

  useEffect(() => {
    const checkPendingPayments = async () => {
      try {
        const pendingPayments = await getAllPendingPayments();
        
        if (pendingPayments.length === 0) {
          return; // Nenhum pagamento pendente
        }
        
        console.log(`üí≥ [PaymentChecker] ${pendingPayments.length} pagamento(s) pendente(s) encontrado(s)`);
        
        // Verificar cada pagamento pendente
        for (const payment of pendingPayments) {
          const { transactionId, timestamp, targetRoute, apiBaseUrl } = payment;
          
          // Verificar se n√£o √© muito antigo (m√°ximo 1 hora)
          const age = Date.now() - timestamp;
          const MAX_AGE = 60 * 60 * 1000; // 1 hora
          
          if (age > MAX_AGE) {
            console.log('‚è∞ [PaymentChecker] Transa√ß√£o muito antiga, removendo:', transactionId);
            await clearPendingPayment(transactionId);
            continue;
          }
          
          // Fazer request para verificar o status
          const url = `${apiBaseUrl}/api/transactions/${transactionId}/status?t=${Date.now()}`;
          
          console.log('üì° [PaymentChecker] Verificando:', transactionId);
          
          try {
            const response = await fetch(url, {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const statusUpper = data.status?.toUpperCase();
              
              // Verificar se foi aprovado
              if (['PAID', 'APPROVED', 'COMPLETED', 'CONFIRMED', 'SUCCESS'].includes(statusUpper)) {
                console.log('üéâ [PaymentChecker] PAGAMENTO APROVADO! Redirecionando para:', targetRoute);
                
                // Remover do IndexedDB
                await clearPendingPayment(transactionId);
                
                // Redirecionar
                setLocation(targetRoute);
                return; // Para de verificar outros pagamentos
              }
            } else {
              console.warn('‚ö†Ô∏è [PaymentChecker] Erro HTTP ao verificar pagamento:', response.status);
            }
          } catch (fetchError) {
            console.error('‚ùå [PaymentChecker] Erro ao fazer request:', fetchError);
          }
        }
      } catch (error) {
        console.error('‚ùå [PaymentChecker] Erro ao verificar pagamentos pendentes:', error);
      }
    };

    // Verificar imediatamente ao carregar
    checkPendingPayments();
    
    // Verificar periodicamente enquanto a p√°gina est√° aberta (a cada 5 segundos)
    const intervalId = setInterval(checkPendingPayments, 5000);
    
    return () => clearInterval(intervalId);
  }, [setLocation]);

  return null; // Este componente n√£o renderiza nada
};

export default PaymentChecker;
